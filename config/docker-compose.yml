volumes:
  metadata_data: {}
  middle_var: {}
  historical_var: {}
  broker_var: {}
  coordinator_var: {}
  router_var: {}
  druid_shared: {}
  druid_metadata: {}
  frontend_node_modules: {}
  postgres_data: {}

services:
  # --- PostgreSQL Database (Druid Metadata) ---
  postgres:
    image: postgres:15
    container_name: sales_analytics_db
    environment:
      POSTGRES_DB: sales_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Enter@321}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Druid Services ---
  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.5.10
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  coordinator:
    image: apache/druid:33.0.0
    container_name: coordinator
    volumes:
      - druid_shared:/opt/shared
      - druid_metadata:/opt/druid/var
    depends_on:
      zookeeper:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8081"
    command:
      - coordinator
    environment:
      - DRUID_SERVICE=coordinator
      - DRUID_XMS=1g
      - DRUID_XMX=2g
      - DRUID_MAXDIRECTMEMORYSIZE=1g
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - druid_zk_service_host=zookeeper
      - druid_zk_paths_base=/druid
      - druid_metadata_storage_type=postgresql
      - druid_metadata_storage_connector_connectURI=jdbc:postgresql://postgres:5432/sales_analytics
      - druid_metadata_storage_connector_user=postgres
      - druid_metadata_storage_connector_password=${POSTGRES_PASSWORD:-Enter@321}
      - druid_storage_type=local
      - druid_storage_storageDirectory=/opt/shared/segments
      - druid_extensions_loadList=["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]

  broker:
    image: apache/druid:33.0.0
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
      coordinator:
        condition: service_started
    ports:
      - "8082:8082"
    command:
      - broker
    environment:
      - DRUID_SERVICE=broker
      - DRUID_XMX=2g
      - DRUID_XMS=2g
      - DRUID_MAXNEWSIZE=512m
      - DRUID_NEWSIZE=512m
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - druid_zk_service_host=zookeeper
      - druid_zk_paths_base=/druid
      - druid_metadata_storage_type=postgresql
      - druid_metadata_storage_connector_connectURI=jdbc:postgresql://postgres:5432/sales_analytics
      - druid_metadata_storage_connector_user=postgres
      - druid_metadata_storage_connector_password=${POSTGRES_PASSWORD:-Enter@321}
      - druid_storage_type=local
      - druid_storage_storageDirectory=/opt/shared/segments
      - druid_extensions_loadList=["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]
    volumes:
      - broker_var:/opt/druid/var

  historical:
    image: apache/druid:33.0.0
    container_name: historical
    depends_on:
      zookeeper:
        condition: service_healthy
      coordinator:
        condition: service_started
    ports:
      - "8083:8083"
    command:
      - historical
    environment:
      - DRUID_SERVICE=historical
      - DRUID_XMX=2g
      - DRUID_XMS=2g
      - DRUID_MAXNEWSIZE=512m
      - DRUID_NEWSIZE=512m
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - druid_zk_service_host=zookeeper
      - druid_zk_paths_base=/druid
      - druid_metadata_storage_type=postgresql
      - druid_metadata_storage_connector_connectURI=jdbc:postgresql://postgres:5432/sales_analytics
      - druid_metadata_storage_connector_user=postgres
      - druid_metadata_storage_connector_password=${POSTGRES_PASSWORD:-Enter@321}
      - druid_storage_type=local
      - druid_storage_storageDirectory=/opt/shared/segments
      - druid_extensions_loadList=["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]
    volumes:
      - druid_shared:/opt/shared
      - druid_metadata:/opt/druid/var


  middlemanager:
    image: apache/druid:33.0.0
    container_name: middlemanager
    depends_on:
      zookeeper:
        condition: service_healthy
      coordinator:
        condition: service_started
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    environment:
      - DRUID_SERVICE=middlemanager
      - DRUID_XMX=2g
      - DRUID_XMS=2g
      - DRUID_MAXNEWSIZE=512m
      - DRUID_NEWSIZE=512m
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - druid_zk_service_host=zookeeper
      - druid_zk_paths_base=/druid
      - druid_metadata_storage_type=postgresql
      - druid_metadata_storage_connector_connectURI=jdbc:postgresql://postgres:5432/sales_analytics
      - druid_metadata_storage_connector_user=postgres
      - druid_metadata_storage_connector_password=${POSTGRES_PASSWORD:-Enter@321}
      - druid_storage_type=local
      - druid_storage_storageDirectory=/opt/shared/segments
      - druid_extensions_loadList=["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]
    volumes:
      - druid_shared:/opt/shared
      - middle_var:/opt/druid/var

  router:
    image: apache/druid:33.0.0
    container_name: router
    depends_on:
      zookeeper:
        condition: service_healthy
      coordinator:
        condition: service_started
    ports:
      - "8888:8888"
    command:
      - router
    environment:
      - DRUID_SERVICE=router
      - DRUID_XMX=2g
      - DRUID_XMS=2g
      - DRUID_MAXNEWSIZE=512m
      - DRUID_NEWSIZE=512m
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - druid_zk_service_host=zookeeper
      - druid_zk_paths_base=/druid
      - druid_metadata_storage_type=postgresql
      - druid_metadata_storage_connector_connectURI=jdbc:postgresql://postgres:5432/sales_analytics
      - druid_metadata_storage_connector_user=postgres
      - druid_metadata_storage_connector_password=${POSTGRES_PASSWORD:-Enter@321}
      - druid_storage_type=local
      - druid_storage_storageDirectory=/opt/shared/segments
      - druid_extensions_loadList=["druid-histogram", "druid-datasketches", "druid-lookups-cached-global", "postgresql-metadata-storage", "druid-multi-stage-query"]
    volumes:
      - router_var:/opt/druid/var


  # --- Backend API (FastAPI) ---
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: sales_analytics_backend
    ports:
      - "8000:8000"
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DRUID_URL=http://router:8888
      - DRUID_BROKER_HOST=router
      - DRUID_BROKER_PORT=8888
      - DRUID_OVERLORD_URL=http://coordinator:8081
    depends_on:
      router:
        condition: service_started
    volumes:
      - ../backend:/app
      - druid_shared:/opt/shared
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # --- Frontend (React) ---
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: sales_analytics_frontend
    ports:
      - "3000:3000"
    env_file:
      - ./docker.env
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - frontend_node_modules:/app/node_modules
    command: npm run dev
